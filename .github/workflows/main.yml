name: Terraform AKS Deployment

on:
  workflow_dispatch:  
    inputs:           
      cluster_name:   
        description: "Name of the AKS Cluster"
        required: true
        default: "my-cluster"

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Login to Azure
      run: |
        az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} \
                 -p ${{ secrets.ARM_CLIENT_SECRET }} \
                 --tenant ${{ secrets.ARM_TENANT_ID }}

    # Check and force-unlock if a lock exists
    - name: Check for Terraform Lock
      run: |
        set +e
        terraform state pull | grep -q '"ID":' && terraform force-unlock $(terraform state pull | jq -r '.ID')
        set -e
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Destroy
      run: terraform destroy -auto-approve

    # - name: Terraform Apply
    # if: github.ref == 'refs/heads/main'
    # run: terraform apply -auto-approve

    # Step to read variables from tfvars file
    - name: Get Resource Group and Cluster Name
      id: get-vars
      run: |
        RESOURCE_GROUP=$(grep 'resource_group_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
        AKS_CLUSTER_NAME=$(grep 'cluster_name' terraform.tfvars | cut -d '=' -f2 | tr -d ' "')
        
        echo "AKS_CLUSTER_NAME=${AKS_CLUSTER_NAME}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=${RESOURCE_GROUP}" >> $GITHUB_ENV

    # Step to get AKS credentials using the captured values
    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} \
                               --name ${{ env.AKS_CLUSTER_NAME }} \
                               --admin

    # Install kubectl
    - name: Set up Kubectl
      uses: azure/setup-kubectl@v3

    # Deploy application to AKS using Kubernetes manifests
    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s-manifests/deployment.yaml
        kubectl apply -f k8s-manifests/service.yaml

